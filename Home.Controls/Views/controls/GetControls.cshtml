@inherits ViewPage
@{
    ViewBag.Title = "Controller Settings";
}

<div class="row" ng-controller="ControlsCntrl">
    <div class="col-md-12">
        <p>
        This page lists the controllers setup on this device. 
        The state of the controller detrimined by the Enable or Disable button states. 
        If the controller is Enabled then the button will show as a Disable option.
        </p>
    </div>
    <div class="col-md-8">    
        <table class="table table-striped">
            <thead> 
                <tr><th></th><th>Name</th><th>Description</th><th></th></tr>
            </thead>
            <tbody>
                <tr ng-repeat="item in Model | filter:FilterText | orderBy:'Name'">
                <td><a href="" ng-click="editControlModel(item)">Edit</a></td>
                <td>{{item.Name}}</td>
                <td>{{item.Type}}</td>
                <td>
                    <div ng-show="controlIsToggleType(item)">
                        <button type="button" class="btn btn-success" ng-click="enableState(item)" ng-show="!item.Value">Set On</button>
                        <button type="button" class="btn btn-warning" ng-click="disableState(item)" ng-show="item.Value">Set Off</button>
                    </div>
                </td>          
                </tr>
            </tbody>
        </table>
    </div>
    <div class="col-md-4">

    </div>
</div>

<script type="text/javascript">
    var ControlModalInstanceCtrl = function ($scope, $http, $modalInstance, Model) {
        $scope.Model = Model;

        $scope.ok = function () {
            //$modalInstance.close($scope.selected.item);
            $modalInstance.close();
        };

        $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
        };

        $scope.plot = function () {
            if ($scope.Model.Config.Chart == undefined || $scope.Model.Config.Chart == null) {
                return null;
            }
            
            var options = {
                grid: {
                    borderWidth: 1,
                    minBorderMargin: 20,
                    labelMargin: 10,
                    backgroundColor: {
                        colors: ["#fff", "#e4f4f4"]
                    },
                    margin: {
                        top: 8,
                        bottom: 20,
                        left: 20
                    },
                    markings: function (axes) {
                        var markings = [];
                        var xaxis = axes.xaxis;
                        for (var x = Math.floor(xaxis.min); x < xaxis.max; x += xaxis.tickSize * 2) {
                            markings.push({ xaxis: { from: x, to: x + xaxis.tickSize }, color: "rgba(232, 232, 255, 0.2)" });
                        }
                        return markings;
                    }
                },
                xaxis: {
                    tickFormatter: function () {
                        return "";
                    }
                },
                yaxis: {
                    min: 0,
                    max: 110
                },
                legend: {
                    show: true
                }
            };
            var series = $scope.Model.Config.Chart.SeriesList;

            var plot = { };
            // use below to reset data
            //plot.setData(series);
            //plot.draw();
            // do update if specified
            var timerId = setTimeout(function() {
                var container = $("#chartplaceholder");
                var w = container.width();
                plot = $.plot(container, series, {
                        xaxis: { mode: "time" },
                    });
                }, 500);

            return plot;
        }



        // run chart
        $scope.chart = $scope.plot();
    };
</script>

<script type="text/javascript">
var modelUrl = window.location;
function ControlsCntrl($scope, $http, $modal) {
    $scope.Model = @Model.AsRawJson();
    $scope.UrlEdit = function (item) { return modelUrl + '/' + item.Id; };

    $scope.controlIsToggleType = function (item) {
        // if the IO value is a boolean type then we can set the value
        return typeof(item.Value) == "boolean";
    };

    $scope.enableState = function (item) {
        var data = { 'Value': true };
        var url = '/controls/' + item.Id + '/set';//modelUrl + '/' + item.Id + '/set';
        $http.put(url, data)
        .success(function(data,status,headers,config){
            // handle success
            if(data.Value != undefined)
            {
                item.Value = data.Value;
            }
            else 
            {
                //$scope.alert.error("There was an error saving the changes. " + data.Message);
            }
        }).error(function(data,status,headers,config) {
            // handle failure
            //$scope.alert.error("There was an error saving the changes. Try again?");   
        });
    };

    $scope.disableState = function (item) {
        var data = { 'Value': false };
        var url = '/controls/' + item.Id + '/set';//modelUrl + '/' + item.Id + '/set';
        $http.put(url, data)
        .success(function(data,status,headers,config){
            // handle success
            if(data.Value != undefined)
            {
                item.Value = data.Value;
            }
            else 
            {
                //$scope.alert.error("There was an error saving the changes. " + data.Message);
            }
        }).error(function(data,status,headers,config) {
            // handle failure
            //$scope.alert.error("There was an error saving the changes. Try again?");   
        });
    };

    $scope.editControlModel = function (item) {
        var templateurl = '/controls/' + item.Id + '/template';
        var modalInstance = $modal.open({
            templateUrl: '/controls/' + item.Id + '/template',//'scheduleModalContent.html',
            controller: ControlModalInstanceCtrl,
            resolve: {
                Model: function () { return item; }
            }
        });


        modalInstance.result.then(function (selectedItem) {
            // item saved
            var editmodel = item;
            $scope.saveControlModel(item);
        }, function () {
            //$log.info('Modal dismissed at: ' + new Date());
        });
    };

    $scope.saveControlModel = function (item) {
        var url = '/controls/' + item.Id;
        var data = item;
        $http.put(url, data)
        .success(function(data,status,headers,config){
            // handle success
            if(data.Config != null && data.Config.Chart != null)
            {
                item.Config.Chart = data.Config.Chart;
            }
        }).error(function(data,status,headers,config) {
            // handle failure
            //$scope.alert.error("There was an error saving the changes. Try again?");   
        });
    };
}

</script>